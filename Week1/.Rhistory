print ("Hello")
install.packages("ggplot")
install.packages("ggplot2")
install.packages("grDevices")
install.packages("grDevices")
install.packages("grDevices")
colors()
colorRamp()
arg(colorRamp)
grey()
args(grey)
args(colorRamp)
pal <- colorRamp(C("red", "blue"))
pal <- colorRamp(c("red", "blue"))
pal(0)
pal(1)
pal(0.5)
pal(seq(0,1 len=10))
pal(seq(0,0, len=10))
pal(seq(0,1, len=10))
pal <- colorRampPalette(c("red", "yellow"))
pal(2)
pal(10)
install.packages("RColorBrewer")
library(RColorBriewer)
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal < colorRampPalette(cols)
pal <- colorRampPalette(cols)
image(volcano, col = pal(20))
image(volcano, col = pal(6))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
smoothScatter(x, y)
args(smoothScatter)
args(smoothScatter, nrpoints=20)
args(smoothScatter, nrpoints=20)
smoothScatter(x, y, nrpoints=20)
args(rgb)
plot(x, y, pch = 10)
x <- rnorm(50)
y <- rnorm(50)
plot(x, y, pch = 10)
plot(x, y, col = rgb(0,0,0,0.2), pch = 19)
y <- rnorm(10000)
x <- rnorm(10000)
plot(x, y, col = rgb(0,0,0,0.2), pch = 19)
install.packages("ggplot2")
library(datasets)
data(cars)
with(cars, plot(speed, dist))
install.packages("lattice")
library(lattice)
state <- data.frame(state.x77, region = state.region)
xyplot(life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4,1))
library(ggplot2)
data(mpg)
qplot(disp, hwy, data = mpg)
qplot(displ, hwy, data = mpg)
?par
library(datasets)
hist(airquality$Ozone)
library(datasets)
with(airquality, plot(Wind, Ozone)
library(datasets)
library(datasets)
airquality <- transform(airquality, Month = factor(Month))
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab="Month", ylab="Ozone (ppb")
# pch - the plotting symbol
# lty - the line type
# lwd - the line width
# col - plotting color
# xlab - label for x-axis
# ylab - label for y-axis
# arguments for par() function - the same for all the plots made
# las = the orientation of the axis labels on the plot
# bg - background color
# mar - margin size
# oma - hte outer margin size (defalut to 0)
# mfrow - numnber of plot per row, colums
# mfcol - number of plots per row
par("lty")
par("col")
par("pch")
par("bg")
par("mar")
par("mfrow")
par("mfcol")
# base plotting functions
# plot - scatterplot
# lines - add lines to a plot, given a vector x values and a correspoding vector of y values
# points - add points to a plot
# text - adds labels
# title - add annotations to x y axis and so on
library(datasets)
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
with(subset(airquality, Month==5), points(Wind, Ozone, col = "blue"))
with(subset(airquality, Month != 5), points(Wind, Ozone, col = "red"))
legend("topright", pch = 1, col = c("blue, "red), legent = c("May", "Other Month"))
legend("topright", pch = 1, col = c("blue, "red)), legent = c("May", "Other Month"))
with(airquality, plot(Wind, Ozone, main = "Ozone and Wind in New York City"))
model <- lm(Ozone ~ Wind, airquality)
abline(model, lwd = 2)
par(mfrow = c(1,2))
with(airquality, {})
with(airquality,  { plot(Wind, Ozone, main = "Ozone and Wind") plot (Solar.R, Ozone, Main = "OZone and Soarl Radiation"), plot(Temp, Ozone, main = Ozone and Temperature)})
rnorm(100)
x <- rnorm(100)
x
y = as.Int(x)
?as
y = as(Integer, x)
y = as.numeric(x)
y
x <- rnorm(100)
y <- rnorm(100)
plot(x,y)
plot(x)
hist(x)
hist(x, col="red")
par(mfrow=C(1,1))
par(mfrow=[1,1]
par(mfrow=[1,1])
par("mfrow")
lst <- [1,1]
lst = c(1,1)
lst
par(mfrow=lst)
hist(x)
hist(x, col="green")
hist(y)
plot(x,y)
plot(x,y, pch = "20")
plot(x,y, pch = 20)
plot(x,y, pch = 20, bg = "grey")
plot(x,y, pch = 20, bg = "green")
plot(x,y, pch = 20, bg = "green")
args(par)
par
par("mfrow")
plot(x,y, pch = 20, title="This is a test")
plot(x,y, pch = 20)
plot(x,y)
title("This is my title")
par(pch = 3)
plot(x, y)
plot(x, y, ylab="This is y")
plot(x, y, ylab="This is y", xlab="This is x")
title("This is my title")
g <- lm(x, y)
g <- lm(x, y, x ~ y)
g <- lm(x, y, x)
g <- lm(x)
library(datasets)
data(airquality)
colnames(airquality)
plot(airquality$Ozone, airquality$Wind)
g <- lm(airquality$Ozone, airquality$Wind, airquality)
library(lattice)
library(datasets)
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transfrom(airquality, Month = factor(Month))
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5,1))
p <- xyplot(Ozone ~ Wind, data = airquality)
print (p)
str(p)
type(p)
typeof(p)
ll
p
p
print(x)
print(p)
install.packages("yaml")
install.packages("htmltools")
install.packages("caTools")
install.packages("bitops")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("markdown")
install.packages("slidify")
install.packages("slidify")
install.pkackages("knitr")
install.packages("knitr")
install.packages("slidfy")
install.packages("slidify")
knitr2html("PA1_template.Rmd")
library(knitr)
knitr2html("PA1_template.Rmd")
dataset(mtcars)
load(mtcars)
package(mtcars)
data(mtcars)
mydata <- na.omit(mtcars)
mydata <- scale(mydata)
wss <- (nrow(mydata) - 1) * sum(apply(mydata, 2, var))
str(mydata)
names(mtcars)
mpg
attach(mtcars)
mpg
table(cyl)
barplot(cyl)
barplot(table(cyl))
stem(mpg)
hist(mpg)
boxplot(mpg)
sd(mpg)
mpg[cyl == 4]
plot(cyl, mpg)
plot (mpg, cyl)
simple.lm(cyl,mpg)
simple.lm(cyl, mpg)
lm
lm(cyl, mpg)
tapply(mpg, cyl, mean)
plot(hp, mpg, pch=cyl)
legend(250, 30, pcg=c(4,5,8))
data(chickwts)
attach(chickwts)
names(chickwts)
boxplot(weight ~ feed)
our.mu <- mean(weight)
out.mu
our.mu
just.casein = weight[feed == 'casein']
t.test(just.casein, mu = our.mu)
t.test(weight[feed == 'casein'], weight[feed == 'sunflower'])
t.test(weight[feed == 'casein'], weight[feed == 'sunflower'], var.equal=TRUE)
qinf(p=0.75, min=0, max=1)
qunif(p=0.75, min=0, max=1)
x <- 1:4
p <- x/sum(x)
temp <-rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
Xmean <- sum(temp["x",]) * temp(["Prob",])
Xmean <- sum(temp["x",] * temp["Prob",])
Xmean <- sum(temp["x",] * temp["Prob",])
x <- 1:4
p <- x/sum(x)
temp <- rbind(x, p)
rownames(temp) <- c("X", "Prob")
temp
Xmean <- sum(temp["X",] * temp["Prob",])
Xmean
Ppregnant_pos = 0.75*0.30/(0.75*0.30+0.48*0.70)
round(Ppregnant_pos*100)
install.packages("swirl")
library(swirl)
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
swirl()
install_from_swirl("Statistical Inference")
library(swirl)
install_from_swirl("Statistical Inference")
library(devtools)
install.packages("devtools")
install_from_swirl("Statistical Inference")
install_from_swirl("Statistical Inference")
power.t.test(n=100,delta=.01,sd=0.04,type="one.sample",alternative = "one.sided")
lines(xfit, yfit, pch=22, col="green")
install.packages("UsingR")
par(mfrow=c(1,2))
library(UsingR);
data(galton)
hist(galton$child, col="blue", breaks = 100)
hist(galton$parent, col="blue", breaks=100)
install.packages("shiny")
attach(mtcars)
plot(wt, mpg)
abline(lm(mppg-wt))
abline(lm(mpg-wt))
abline(lm(mpg~wt))
title("Regression of MPG on Weight")
hist(mtcars$mpg)
hist(mtcars$mpg, breaks=12, col="red")
x <- mtcars$mpg
h <- hist(x, breaks=10, col="red", xlab="Miles Per Gallon", main="Historgram with Normal Curve")
yfit <- seq(min(x), max(x), length=40)
yfit <- yfit*diff(h$mids[1:2])*lenght(x)
yfit <- yfit*diff(h$mids[1:2])*length(x)
setwd(C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Week1)
setwd(C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Week1)
setwd("C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Week1")
if (interactive()) {
# Read the file and set DateFormat as Date
file = read.csv("JitteredHeadCount.csv")
file$DateFormat = as.POSIXct(file$DateFormat, format="%m/%d/%Y")
file$DateFormat <- as.Date(file$DateFormat)
# (1) Compare Weekend vs. Weekday Head Counts
weekend <- file[file$DayOfWeek == 7 | file$DayOfWeek == 1,]
workweek <- file[file$DayOfWeek > 1 & file$DayOfWeek < 7,]
summary(weekend)
summary(workweek)
m_weekend <- mean(weekend$HeadCount)
m_workweek <- mean(workweek$HeadCount)
# (1) Headcount is 30% higher (on average) on weekends vs. that during the weekdays
print(1 - m_workweek / m_weekend)
# (2) Compare Table Occupancy Weekday vs. WorkWeek
m_weekend <- mean(weekend$TablesOpen)
m_workweek <- mean(workweek$TablesOpen)
# (2) There are 3% (on avarage) less tables opened during the workweek vs. that of a weekend
print(1 - m_workweek / m_weekend)
# (3) Explore Occupancy Per Hour on Weekends, Weekdays, and overall
plot(file$HeadCount ~ file$Hour, data = weekend, type = "h", main="Weekend Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = workweek, type = "h", main="Weekdays Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = file, type = "h", main="Total Head Count per Hour")
total_peak <- file[file$Hour < 5 | file$Hour > 13,]
total_low <- file[file$Hour > 4 & file$Hour < 13,]
total_peak <- mean(total_peak$HeadCount)
total_low <- mean(total_low$HeadCount)
# (3) There is a 70% difference between peak times and low times in the casino
#     The peak time starts around 2:00PM and ends around 5:00AM on throughout the week (workdays and weekends)
print(1 - total_low / total_peak)
# (4) Exploring most popular games played during workweek vs. those played during weekend
# The most populare games are CR, S6, and TP on weekends and during workdays
plot(weekend$HeadCount~weekend$GameCode, type="h", main="Head Count by Game code on Weekends")
plot(workweek$HeadCount~workweek$GameCode, type="h", main="Head Count by Game code during Workweek")
# (4) Isolating weekend headcount per popular game
weekend.CR <- weekend$HeadCount[weekend$GameCode == 'CR']
weekend.S6 <- weekend$HeadCount[weekend$GameCode == 'S6']
weekend.TP <- weekend$HeadCount[weekend$GameCode == 'TP']
# (4) Isolating workday headcount per popular game
workweek.CR <- workweek$HeadCount[workweek$GameCode == 'CR']
workweek.S6 <- workweek$HeadCount[workweek$GameCode == 'S6']
workweek.TP <- workweek$HeadCount[workweek$GameCode == 'TP']
# (4) There are 34% more CR players on weekend than there is those during weekdays
# This is by far the most popular game
1 - mean(workweek.CR) / mean(weekend.CR)
# (4) There are 29% more S6 players on weekends than those during the weekdays
1 - mean(workweek.S6) / mean(weekend.S6)
# (4) There are 26% more TP players on weekends than those during the weekdays
1 - mean(workweek.TP) / mean(weekend.TP)
}
if (interactive()) {
# Read the file and set DateFormat as Date
file = read.csv("JitteredHeadCount.csv")
file$DateFormat = as.POSIXct(file$DateFormat, format="%m/%d/%Y")
file$DateFormat <- as.Date(file$DateFormat)
# (1) Compare Weekend vs. Weekday Head Counts
weekend <- file[file$DayOfWeek == 7 | file$DayOfWeek == 1,]
workweek <- file[file$DayOfWeek > 1 & file$DayOfWeek < 7,]
summary(weekend)
summary(workweek)
m_weekend <- mean(weekend$HeadCount)
m_workweek <- mean(workweek$HeadCount)
# (1) Headcount is 30% higher (on average) on weekends vs. that during the weekdays
Print("Headcount is 30% higher (on average) on weekends vs. that during the weekdays")
print(1 - m_workweek / m_weekend)
# (2) Compare Table Occupancy Weekday vs. WorkWeek
m_weekend <- mean(weekend$TablesOpen)
m_workweek <- mean(workweek$TablesOpen)
# (2) There are 3% (on avarage) less tables opened during the workweek vs. that of a weekend
print("There are 3% (on avarage) less tables opened during the workweek vs. that of a weekend")
print(1 - m_workweek / m_weekend)
# (3) Explore Occupancy Per Hour on Weekends, Weekdays, and overall
plot(file$HeadCount ~ file$Hour, data = weekend, type = "h", main="Weekend Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = workweek, type = "h", main="Weekdays Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = file, type = "h", main="Total Head Count per Hour")
total_peak <- file[file$Hour < 5 | file$Hour > 13,]
total_low <- file[file$Hour > 4 & file$Hour < 13,]
total_peak <- mean(total_peak$HeadCount)
total_low <- mean(total_low$HeadCount)
# (3) There is a 70% difference in head count between peak times and low times in the casino
#     The peak time starts around 2:00PM and ends around 5:00AM on throughout the week (workdays and weekends)
print("There is a 70% difference in head count between peak times and low times")
print(1 - total_low / total_peak)
# (4) Exploring most popular games played during workweek vs. those played during weekend
# The most populare games are CR, S6, and TP on weekends and during workdays
plot(weekend$HeadCount~weekend$GameCode, type="h", main="Head Count by Game code on Weekends")
plot(workweek$HeadCount~workweek$GameCode, type="h", main="Head Count by Game code during Workweek")
# (4) Isolating weekend headcount per popular game
weekend.CR <- weekend$HeadCount[weekend$GameCode == 'CR']
weekend.S6 <- weekend$HeadCount[weekend$GameCode == 'S6']
weekend.TP <- weekend$HeadCount[weekend$GameCode == 'TP']
# (4) Isolating workday headcount per popular game
workweek.CR <- workweek$HeadCount[workweek$GameCode == 'CR']
workweek.S6 <- workweek$HeadCount[workweek$GameCode == 'S6']
workweek.TP <- workweek$HeadCount[workweek$GameCode == 'TP']
# (4) There are 34% more CR players on weekend than there is those during weekdays
# This is by far the most popular game
print("There are 34% more CR players on weekend than there is those during weekdays")
print(1 - mean(workweek.CR) / mean(weekend.CR))
# (4) There are 29% more S6 players on weekends than those during the weekdays
print("here are 29% more S6 players on weekends than those during the weekdays")
print(1 - mean(workweek.S6) / mean(weekend.S6))
# (4) There are 26% more TP players on weekends than those during the weekdays
print("There are 26% more TP players on weekends than those during the weekdays")
print(1 - mean(workweek.TP) / mean(weekend.TP))
}
if (interactive()) {
# Read the file and set DateFormat as Date
file = read.csv("JitteredHeadCount.csv")
file$DateFormat = as.POSIXct(file$DateFormat, format="%m/%d/%Y")
file$DateFormat <- as.Date(file$DateFormat)
# (1) Compare Weekend vs. Weekday Head Counts
weekend <- file[file$DayOfWeek == 7 | file$DayOfWeek == 1,]
workweek <- file[file$DayOfWeek > 1 & file$DayOfWeek < 7,]
summary(weekend)
summary(workweek)
m_weekend <- mean(weekend$HeadCount)
m_workweek <- mean(workweek$HeadCount)
# (1) Headcount is 30% higher (on average) on weekends vs. that during the weekdays
print("Headcount is 30% higher (on average) on weekends vs. that during the weekdays")
print(1 - m_workweek / m_weekend)
# (2) Compare Table Occupancy Weekday vs. WorkWeek
m_weekend <- mean(weekend$TablesOpen)
m_workweek <- mean(workweek$TablesOpen)
# (2) There are 3% (on avarage) less tables opened during the workweek vs. that of a weekend
print("There are 3% (on avarage) less tables opened during the workweek vs. that of a weekend")
print(1 - m_workweek / m_weekend)
# (3) Explore Occupancy Per Hour on Weekends, Weekdays, and overall
plot(file$HeadCount ~ file$Hour, data = weekend, type = "h", main="Weekend Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = workweek, type = "h", main="Weekdays Head Count per Hour")
plot(file$HeadCount ~ file$Hour, data = file, type = "h", main="Total Head Count per Hour")
total_peak <- file[file$Hour < 5 | file$Hour > 13,]
total_low <- file[file$Hour > 4 & file$Hour < 13,]
total_peak <- mean(total_peak$HeadCount)
total_low <- mean(total_low$HeadCount)
# (3) There is a 70% difference in head count between peak times and low times in the casino
#     The peak time starts around 2:00PM and ends around 5:00AM on throughout the week (workdays and weekends)
print("There is a 70% difference in head count between peak times and low times")
print(1 - total_low / total_peak)
# (4) Exploring most popular games played during workweek vs. those played during weekend
# The most populare games are CR, S6, and TP on weekends and during workdays
plot(weekend$HeadCount~weekend$GameCode, type="h", main="Head Count by Game code on Weekends")
plot(workweek$HeadCount~workweek$GameCode, type="h", main="Head Count by Game code during Workweek")
# (4) Isolating weekend headcount per popular game
weekend.CR <- weekend$HeadCount[weekend$GameCode == 'CR']
weekend.S6 <- weekend$HeadCount[weekend$GameCode == 'S6']
weekend.TP <- weekend$HeadCount[weekend$GameCode == 'TP']
# (4) Isolating workday headcount per popular game
workweek.CR <- workweek$HeadCount[workweek$GameCode == 'CR']
workweek.S6 <- workweek$HeadCount[workweek$GameCode == 'S6']
workweek.TP <- workweek$HeadCount[workweek$GameCode == 'TP']
# (4) There are 34% more CR players on weekend than there is those during weekdays
# This is by far the most popular game
print("There are 34% more CR players on weekend than there is those during weekdays")
print(1 - mean(workweek.CR) / mean(weekend.CR))
# (4) There are 29% more S6 players on weekends than those during the weekdays
print("here are 29% more S6 players on weekends than those during the weekdays")
print(1 - mean(workweek.S6) / mean(weekend.S6))
# (4) There are 26% more TP players on weekends than those during the weekdays
print("There are 26% more TP players on weekends than those during the weekdays")
print(1 - mean(workweek.TP) / mean(weekend.TP))
}
load_data = function(datafile, logger=NA){
data = read.csv(datafile, stringsAsFactors=FALSE)
loginfo("Loaded Data.", logger="data_logger")
# Check if any data was loaded
if(nrow(data)==0){
logwarn("No Data Loaded", logger="data_logger")
}
return(data)
}
load_data(x, y)
load_data(file)
load_data("Tests.txt")
install.packages("logging")
getwd()
require(logging)
loginfo("Test", logger="data_logger")
logwarn("No Data Loaded", logger="data_logger")
exit()
quit()

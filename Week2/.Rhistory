weather_data = weather_data[!duplicated(weather_data[c("date", 'Hour')]),]
# Rename some columns:
intersect(names(headcount), names(weather_data))
weather_data$DateFormat = weather_data$date
weather_data$date = NULL
# Pick one of the below merges, and comment out the other two.
# <<<CHANGE BELOW MERGING CODE>>>
# Merge (base)
## headcount_base_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat","Hour"))
# Merge(data.table)
# Note that data.table has a problem.  It canNOT take POSIX values. So we drop it (we are
#      done with that column anyways)
weather_data$datetime = NULL
library(data.table)
headcount = as.data.table(headcount)
weather_data = as.data.table(weather_data)
# Set keys for faster merges
setkeyv(headcount, c("DateFormat", "Hour"))
setkeyv(weather_data, c("DateFormat", "Hour"))
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
# Merge(dplyr)
## library(dplyr)
## headcount_dplyr_all = left_join(headcount, weather_data, by=c("DateFormat", "Hour"))
##----Find another insight involving weather------
# For now, drop all NA rows:
#     use the command 'complete.cases'
# Use 'complete.cases()' as a row filter on your data frame.
# <<<INSERT NEW CODE HERE>>>
good <- complete.cases(headcount_dt_all)
headcount_dt_all <- headcount_dt_all[good,]
headcount_dt_all$conditions <- as.factor(headcount_dt_all$conditions)
View(headcount_dt_all)
plot(headcount_dt_all$conditions~headcount_dt_all$TablesOcc)
plot(headcount_dt_all$conditions, headcount_dt_all$TablesOcc)
dust <- headcount_dt_all[headcount_dt_all$conditions = 'Widespread Dust',]
dust <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]
rain <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]
dust_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]$TablesOcc
rain_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]$TablesOcc
mean(dust_occ)
mean(rain_occ)
temp <- headcount_dt_all
temp <- temp[temp$conditions != 'Widespread Dust',]
temp <- temp[temp$conditions != 'Widespread Dust',]
temp <- temp[temp$conditions == 'Widespread Dust',]
temp <- temp[conditions != 'Widespread Dust',]
temp <- temp[conditions != 'Rain']
mean(dust_occ)
mean(rain_occ)
mean(temp$TablesOcc)
1 - dust_mean / all_mean
dust_mean <- mean(dust_occ)
rain_mean <- mean(rain_occ)
# Calculating mean for all conditions except for Rain and Widespread Dust
all_mean <- mean(temp$TablesOcc)
# Calculating difference in means for Widespread Dust vs all other conditions
1 - dust_mean / all_mean
# Calculating difference in means for Rain vs all other conditions
1 - rain_mean / all_mean
dust_mean
rain_mean
all_mean
dust_mean / all_mean
rain_mean / all_mean
1 - all_mean / dust_mean
1 - all_mean / rain_mean
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
# Merge(dplyr)
## library(dplyr)
## headcount_dplyr_all = left_join(headcount, weather_data, by=c("DateFormat", "Hour"))
##----Find another insight involving weather------
# For now, drop all NA rows:
#     use the command 'complete.cases'
# Use 'complete.cases()' as a row filter on your data frame.
# <<<INSERT NEW CODE HERE>>>
# Isolating complete cases
good <- complete.cases(headcount_dt_all)
headcount_dt_all <- headcount_dt_all[good,]
# Setting weather condition as factor variable
headcount_dt_all$conditions <- as.factor(headcount_dt_all$conditions)
# Plot weather conditions vs. Table Occupancy
plot(headcount_dt_all$conditions, headcount_dt_all$TablesOcc)
print("When the conditions are 'Rain' or 'Widespread Dust', table occupancy increases")
# isolating dust and rain conditions/table occupancies
dust_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]$TablesOcc
rain_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]$TablesOcc
# removing dust and rain conditions from the test data frame
temp <- headcount_dt_all
temp <- temp[conditions != 'Widespread Dust',]
temp <- temp[conditions != 'Rain']
# Calculating means for days when conditions are Rain and Widespread Dust
dust_mean <- mean(dust_occ)
rain_mean <- mean(rain_occ)
# Calculating mean for all conditions except for Rain and Widespread Dust
all_mean <- mean(temp$TablesOcc)
# Calculating difference in means for Widespread Dust vs all other conditions
1 - all_mean / dust_mean
# Calculating difference in means for Rain vs all other conditions
1 - all_mean / rain_mean
print("The differnce in means between table occupancy during the days when weather condition is Widespread Dust")
print("vs. all other weather conditions is 27%, meaning that table occupancy increases in average by 27%")
print("when the weather condition is Widespread Dust")
print("")
print("The differnce in means between table occupancy during the days when weather condition is Rain")
print("vs. all other weather conditions is 35%, meaning that table occupancy increases in average by 35%")
print("when the weather condition is Rain")
##--------------------------------------------
##
## R Review Homework
##
## Aleksey Kramer
##
## Homework 2 R-script
##
##--------------------------------------------
##-----Set working directory-----
setwd("C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Science\\UW_Data_Science_350\\Week2")
##-----Load Libraries-----
library(dplyr)
library(data.table)
source('weather_retrieval.R')
# Load jittered Data
headcount = read.csv('JitteredHeadCount.csv', stringsAsFactors = FALSE)
headcount$DateFormat = as.Date(headcount$DateFormat, format="%m/%d/%Y")
weather_file_name = 'las_vegas_hourly_weather.csv'
# Let's test if the file is in the directry using list.files()
#        If it is, load that file instead of running webscraper
# <<INSERT CODE HERE>>>
# <<CHANGE BELOW CODE BASE ON ABOVE CODE>>>
# If it isn't, run webscraper:
# Look at dates:
if (file.exists(weather_file_name)) {
weather_data = read.csv(weather_file_name)
} else {
range(headcount$DateFormat)
airport = 'KLAS'
dates = seq(from=min(headcount$DateFormat), to=max(headcount$DateFormat), by=1)
weather_data = get_weather_data(airport, dates)
write.csv(weather_data, file = weather_file_name)
}
names(weather_data) = c('time','temp','dew_pt','humidity','pressure',
'visibility','wind_dir','wind_speed','gust_speed',
'precipitation','events','conditions',
'wind_dir_deg','date')
# Let's create a datetime in the weather data
weather_data$datetime = paste(weather_data$date,weather_data$time)
weather_data$datetime = strptime(weather_data$datetime, format="%Y-%m-%d %I:%M %p")
weather_data$Hour = as.numeric(format(round(weather_data$datetime, units="hours"), format="%H"))
# Let's merge with different methods.
#   - If we were truly merging to analyze casino data, we don't want to lose
#      headcount data if weather doesn't exist, so we want to do a
#      left merge (keeping all the headcount data)
#
#   - Remember, we want to merge on date AND hour.
#   - Note: the headcount data has multiple rows for these (more than 1 game type)
# Check for duplicates!
anyDuplicated(headcount[c("DateFormat", "Hour","GameCode")])
anyDuplicated(weather_data[c("date", 'Hour')]) # Oh no!  How could this happen?
# Drop for now:
weather_data = weather_data[!duplicated(weather_data[c("date", 'Hour')]),]
# Rename some columns:
intersect(names(headcount), names(weather_data))
weather_data$DateFormat = weather_data$date
weather_data$date = NULL
# Pick one of the below merges, and comment out the other two.
# <<<CHANGE BELOW MERGING CODE>>>
# Merge (base)
## headcount_base_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat","Hour"))
# Merge(data.table)
# Note that data.table has a problem.  It canNOT take POSIX values. So we drop it (we are
#      done with that column anyways)
weather_data$datetime = NULL
library(data.table)
headcount = as.data.table(headcount)
weather_data = as.data.table(weather_data)
# Set keys for faster merges
setkeyv(headcount, c("DateFormat", "Hour"))
setkeyv(weather_data, c("DateFormat", "Hour"))
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
# Merge(dplyr)
## library(dplyr)
## headcount_dplyr_all = left_join(headcount, weather_data, by=c("DateFormat", "Hour"))
##----Find another insight involving weather------
# For now, drop all NA rows:
#     use the command 'complete.cases'
# Use 'complete.cases()' as a row filter on your data frame.
# <<<INSERT NEW CODE HERE>>>
# Isolating complete cases
good <- complete.cases(headcount_dt_all)
headcount_dt_all <- headcount_dt_all[good,]
# Setting weather condition as factor variable
headcount_dt_all$conditions <- as.factor(headcount_dt_all$conditions)
# Plot weather conditions vs. Table Occupancy
plot(headcount_dt_all$conditions, headcount_dt_all$TablesOcc)
print("When the conditions are 'Rain' or 'Widespread Dust', table occupancy increases")
# isolating dust and rain conditions/table occupancies
dust_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]$TablesOcc
rain_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]$TablesOcc
# removing dust and rain conditions from the test data frame
temp <- headcount_dt_all
temp <- temp[conditions != 'Widespread Dust',]
temp <- temp[conditions != 'Rain']
# Calculating means for days when conditions are Rain and Widespread Dust
dust_mean <- mean(dust_occ)
rain_mean <- mean(rain_occ)
# Calculating mean for all conditions except for Rain and Widespread Dust
all_mean <- mean(temp$TablesOcc)
# Calculating difference in means for Widespread Dust vs all other conditions
1 - all_mean / dust_mean
# Calculating difference in means for Rain vs all other conditions
1 - all_mean / rain_mean
# The differnce in means between table occupancy during the days when weather condition is Widespread Dust
# vs. all other weather conditions is 27%, meaning that table occupancy increases in average by 27%
# when the weather condition is Widespread Dust
# The differnce in means between table occupancy during the days when weather condition is Rain
# vs. all other weather conditions is 35%, meaning that table occupancy increases in average by 35%
# when the weather condition is Rain
##--------------------------------------------
##
## R Review Homework
##
## Aleksey Kramer
##
## Homework 2 R-script
##
##--------------------------------------------
##-----Set working directory-----
setwd("C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Science\\UW_Data_Science_350\\Week2")
##-----Load Libraries-----
library(dplyr)
library(data.table)
source('weather_retrieval.R')
# Load jittered Data
headcount = read.csv('JitteredHeadCount.csv', stringsAsFactors = FALSE)
headcount$DateFormat = as.Date(headcount$DateFormat, format="%m/%d/%Y")
weather_file_name = 'las_vegas_hourly_weather.csv'
# Let's test if the file is in the directry using list.files()
#        If it is, load that file instead of running webscraper
# <<INSERT CODE HERE>>>
# <<CHANGE BELOW CODE BASE ON ABOVE CODE>>>
# If it isn't, run webscraper:
# Look at dates:
if (file.exists(weather_file_name)) {
weather_data = read.csv(weather_file_name)
} else {
range(headcount$DateFormat)
airport = 'KLAS'
dates = seq(from=min(headcount$DateFormat), to=max(headcount$DateFormat), by=1)
weather_data = get_weather_data(airport, dates)
write.csv(weather_data, file = weather_file_name)
}
names(weather_data) = c('time','temp','dew_pt','humidity','pressure',
'visibility','wind_dir','wind_speed','gust_speed',
'precipitation','events','conditions',
'wind_dir_deg','date')
# Let's create a datetime in the weather data
weather_data$datetime = paste(weather_data$date,weather_data$time)
weather_data$datetime = strptime(weather_data$datetime, format="%Y-%m-%d %I:%M %p")
weather_data$Hour = as.numeric(format(round(weather_data$datetime, units="hours"), format="%H"))
# Let's merge with different methods.
#   - If we were truly merging to analyze casino data, we don't want to lose
#      headcount data if weather doesn't exist, so we want to do a
#      left merge (keeping all the headcount data)
#
#   - Remember, we want to merge on date AND hour.
#   - Note: the headcount data has multiple rows for these (more than 1 game type)
# Check for duplicates!
anyDuplicated(headcount[c("DateFormat", "Hour","GameCode")])
anyDuplicated(weather_data[c("date", 'Hour')]) # Oh no!  How could this happen?
# Drop for now:
weather_data = weather_data[!duplicated(weather_data[c("date", 'Hour')]),]
# Rename some columns:
intersect(names(headcount), names(weather_data))
weather_data$DateFormat = weather_data$date
weather_data$date = NULL
# Pick one of the below merges, and comment out the other two.
# <<<CHANGE BELOW MERGING CODE>>>
# Merge (base)
## headcount_base_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat","Hour"))
# Merge(data.table)
# Note that data.table has a problem.  It canNOT take POSIX values. So we drop it (we are
#      done with that column anyways)
weather_data$datetime = NULL
library(data.table)
headcount = as.data.table(headcount)
weather_data = as.data.table(weather_data)
# Set keys for faster merges
setkeyv(headcount, c("DateFormat", "Hour"))
setkeyv(weather_data, c("DateFormat", "Hour"))
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
# Merge(dplyr)
## library(dplyr)
## headcount_dplyr_all = left_join(headcount, weather_data, by=c("DateFormat", "Hour"))
##----Find another insight involving weather------
# For now, drop all NA rows:
#     use the command 'complete.cases'
# Use 'complete.cases()' as a row filter on your data frame.
# <<<INSERT NEW CODE HERE>>>
# Isolating complete cases
good <- complete.cases(headcount_dt_all)
headcount_dt_all <- headcount_dt_all[good,]
# Setting weather condition as factor variable
headcount_dt_all$conditions <- as.factor(headcount_dt_all$conditions)
# Plot weather conditions vs. Table Occupancy
plot(headcount_dt_all$conditions, headcount_dt_all$TablesOcc)
print("When the conditions are 'Rain' or 'Widespread Dust', table occupancy increases")
# isolating dust and rain conditions/table occupancies
dust_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]$TablesOcc
rain_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]$TablesOcc
# removing dust and rain conditions from the test data frame
temp <- headcount_dt_all
temp <- temp[conditions != 'Widespread Dust',]
temp <- temp[conditions != 'Rain']
# Calculating means for days when conditions are Rain and Widespread Dust
dust_mean <- mean(dust_occ)
rain_mean <- mean(rain_occ)
# Calculating mean for all conditions except for Rain and Widespread Dust
all_mean <- mean(temp$TablesOcc)
# Calculating difference in means for Widespread Dust vs all other conditions
1 - all_mean / dust_mean
# Calculating difference in means for Rain vs all other conditions
1 - all_mean / rain_mean
# The differnce in means between table occupancy during the days when weather condition is Widespread Dust
# vs. all other weather conditions is 27%, meaning that table occupancy increases in average by 27%
# when the weather condition is Widespread Dust
# The differnce in means between table occupancy during the days when weather condition is Rain
# vs. all other weather conditions is 35%, meaning that table occupancy increases in average by 35%
# when the weather condition is Rain
##--------------------------------------------
##
## R Review Homework
##
## Aleksey Kramer
##
## Homework 2 R-script
##
##--------------------------------------------
##-----Set working directory-----
setwd("C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Science\\UW_Data_Science_350\\Week2")
##-----Load Libraries-----
library(dplyr)
library(data.table)
source('weather_retrieval.R')
# Load jittered Data
headcount = read.csv('JitteredHeadCount.csv', stringsAsFactors = FALSE)
headcount$DateFormat = as.Date(headcount$DateFormat, format="%m/%d/%Y")
weather_file_name = 'las_vegas_hourly_weather.csv'
# Let's test if the file is in the directry using list.files()
#        If it is, load that file instead of running webscraper
# <<INSERT CODE HERE>>>
# <<CHANGE BELOW CODE BASE ON ABOVE CODE>>>
# If it isn't, run webscraper:
# Look at dates:
if (file.exists(weather_file_name)) {
weather_data = read.csv(weather_file_name)
} else {
range(headcount$DateFormat)
airport = 'KLAS'
dates = seq(from=min(headcount$DateFormat), to=max(headcount$DateFormat), by=1)
weather_data = get_weather_data(airport, dates)
write.csv(weather_data, file = weather_file_name)
}
names(weather_data) = c('time','temp','dew_pt','humidity','pressure',
'visibility','wind_dir','wind_speed','gust_speed',
'precipitation','events','conditions',
'wind_dir_deg','date')
# Let's create a datetime in the weather data
weather_data$datetime = paste(weather_data$date,weather_data$time)
weather_data$datetime = strptime(weather_data$datetime, format="%Y-%m-%d %I:%M %p")
weather_data$Hour = as.numeric(format(round(weather_data$datetime, units="hours"), format="%H"))
# Let's merge with different methods.
#   - If we were truly merging to analyze casino data, we don't want to lose
#      headcount data if weather doesn't exist, so we want to do a
#      left merge (keeping all the headcount data)
#
#   - Remember, we want to merge on date AND hour.
#   - Note: the headcount data has multiple rows for these (more than 1 game type)
# Check for duplicates!
anyDuplicated(headcount[c("DateFormat", "Hour","GameCode")])
anyDuplicated(weather_data[c("date", 'Hour')]) # Oh no!  How could this happen?
# Drop for now:
weather_data = weather_data[!duplicated(weather_data[c("date", 'Hour')]),]
# Rename some columns:
intersect(names(headcount), names(weather_data))
weather_data$DateFormat = weather_data$date
weather_data$date = NULL
# Pick one of the below merges, and comment out the other two.
# <<<CHANGE BELOW MERGING CODE>>>
# Merge (base)
## headcount_base_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat","Hour"))
# Merge(data.table)
# Note that data.table has a problem.  It canNOT take POSIX values. So we drop it (we are
#      done with that column anyways)
weather_data$datetime = NULL
library(data.table)
headcount = as.data.table(headcount)
weather_data = as.data.table(weather_data)
# Set keys for faster merges
setkeyv(headcount, c("DateFormat", "Hour"))
setkeyv(weather_data, c("DateFormat", "Hour"))
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
##--------------------------------------------
##
## R Review Homework
##
## Aleksey Kramer
##
## Homework 2 R-script
##
##--------------------------------------------
##-----Set working directory-----
setwd("C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Science\\UW_Data_Science_350\\Week2")
##-----Load Libraries-----
library(dplyr)
library(data.table)
source('weather_retrieval.R')
# Load jittered Data
headcount = read.csv('JitteredHeadCount.csv', stringsAsFactors = FALSE)
headcount$DateFormat = as.Date(headcount$DateFormat, format="%m/%d/%Y")
weather_file_name = 'las_vegas_hourly_weather.csv'
# Let's test if the file is in the directry using list.files()
#        If it is, load that file instead of running webscraper
# <<INSERT CODE HERE>>>
# <<CHANGE BELOW CODE BASE ON ABOVE CODE>>>
# If it isn't, run webscraper:
# Look at dates:
if (file.exists(weather_file_name)) {
weather_data = read.csv(weather_file_name)
} else {
range(headcount$DateFormat)
airport = 'KLAS'
dates = seq(from=min(headcount$DateFormat), to=max(headcount$DateFormat), by=1)
weather_data = get_weather_data(airport, dates)
write.csv(weather_data, file = weather_file_name)
}
names(weather_data) = c('time','temp','dew_pt','humidity','pressure',
'visibility','wind_dir','wind_speed','gust_speed',
'precipitation','events','conditions',
'wind_dir_deg','date')
# Let's create a datetime in the weather data
weather_data$datetime = paste(weather_data$date,weather_data$time)
weather_data$datetime = strptime(weather_data$datetime, format="%Y-%m-%d %I:%M %p")
weather_data$Hour = as.numeric(format(round(weather_data$datetime, units="hours"), format="%H"))
# Let's merge with different methods.
#   - If we were truly merging to analyze casino data, we don't want to lose
#      headcount data if weather doesn't exist, so we want to do a
#      left merge (keeping all the headcount data)
#
#   - Remember, we want to merge on date AND hour.
#   - Note: the headcount data has multiple rows for these (more than 1 game type)
# Check for duplicates!
anyDuplicated(headcount[c("DateFormat", "Hour","GameCode")])
anyDuplicated(weather_data[c("date", 'Hour')]) # Oh no!  How could this happen?
# Drop for now:
weather_data = weather_data[!duplicated(weather_data[c("date", 'Hour')]),]
# Rename some columns:
intersect(names(headcount), names(weather_data))
weather_data$DateFormat = weather_data$date
weather_data$date = NULL
# Pick one of the below merges, and comment out the other two.
# <<<CHANGE BELOW MERGING CODE>>>
# Merge (base)
## headcount_base_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat","Hour"))
# Merge(data.table)
# Note that data.table has a problem.  It canNOT take POSIX values. So we drop it (we are
#      done with that column anyways)
weather_data$datetime = NULL
library(data.table)
headcount = as.data.table(headcount)
weather_data = as.data.table(weather_data)
# Set keys for faster merges
setkeyv(headcount, c("DateFormat", "Hour"))
setkeyv(weather_data, c("DateFormat", "Hour"))
headcount_dt_all = merge(headcount, weather_data, all.x=TRUE, by=c("DateFormat", "Hour"))
# Merge(dplyr)
## library(dplyr)
## headcount_dplyr_all = left_join(headcount, weather_data, by=c("DateFormat", "Hour"))
##----Find another insight involving weather------
# For now, drop all NA rows:
#     use the command 'complete.cases'
# Use 'complete.cases()' as a row filter on your data frame.
# <<<INSERT NEW CODE HERE>>>
# Isolating complete cases
good <- complete.cases(headcount_dt_all)
headcount_dt_all <- headcount_dt_all[good,]
# Setting weather condition as factor variable
headcount_dt_all$conditions <- as.factor(headcount_dt_all$conditions)
# Plot weather conditions vs. Table Occupancy
plot(headcount_dt_all$conditions, headcount_dt_all$TablesOcc)
print("When the conditions are 'Rain' or 'Widespread Dust', table occupancy increases")
# isolating dust and rain conditions/table occupancies
dust_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Widespread Dust',]$TablesOcc
rain_occ <- headcount_dt_all[headcount_dt_all$conditions == 'Rain',]$TablesOcc
# removing dust and rain conditions from the test data frame
temp <- headcount_dt_all
temp <- temp[conditions != 'Widespread Dust',]
temp <- temp[conditions != 'Rain',]
# Calculating means for days when conditions are Rain and Widespread Dust
dust_mean <- mean(dust_occ)
rain_mean <- mean(rain_occ)
# Calculating mean for all conditions except for Rain and Widespread Dust
all_mean <- mean(temp$TablesOcc)
# Calculating difference in means for Widespread Dust vs all other conditions
1 - all_mean / dust_mean
# Calculating difference in means for Rain vs all other conditions
1 - all_mean / rain_mean
# The differnce in means between table occupancy during the days when weather condition is Widespread Dust
# vs. all other weather conditions is 27%, meaning that table occupancy increases in average by 27%
# when the weather condition is Widespread Dust
# The differnce in means between table occupancy during the days when weather condition is Rain
# vs. all other weather conditions is 35%, meaning that table occupancy increases in average by 35%
# when the weather condition is Rain
